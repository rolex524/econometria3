runif(1, 39, 146)
runif(1, 39, 146)
runif(1, 39, 146)
sum(3!)
factorial(3)
sum(factorial(3))
1+sum(2^(10))
1+sum(2^(11))
1+sum(2^(9))
1+sum(2^(8))
1+sum(2^(15))
shiny::runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
library(shiny)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
mean
getAnywhere(mean)
tabPanel()
tabPanel
getAnywhere(tableOutput)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
character(0)
character(1)
as.character(1)
as.character(0)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
switch(as.character(estado$pergunta),
'2' = numericInput()
)
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
shiny::runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
runApp('C:/Users/tadeu/Desktop/FGV/slq/esqueleto_v01/esqueleto_v01')
for(i in 1:10000){}
x <- vector(100000)
x <- matrix(100000)
x <- matrix(nrow = 100000, ncol = 2)
x[,1] <- rnorm(1)
View(x)
View(x)
x <- lapply(x[,1], rnorm(1))
x[,1] <- 0
x <- 0
x <- matrix(nrow = 100000, ncol = 2)
x <- matrix(runif(100000), nrow = 2)
View(x)
View(x)
x <- matrix(runif(100000), ncol = 2)
View(x)
View(x)
x <- matrix(runif(100000), ncol = 1)
y <- 10 + 0.5*x + runif(1)
View(y)
lm(x ~ y)
lm(y ~ x)
y <- 10 + 0.5*x + runif(2)
View(y)
lm(y ~ x)
y <- 10 + 0.5*x + runif(1)
lm(y ~ x)
plot(x,y)
x <- matrix(rnorm(100000), ncol = 1)
y <- 10 + 0.5*x + rnorm(1, sd = 3)
lm(y ~ x)
plot(x,y)
y <- 10 + 0.5*x + rnorm(1, sd = 40)
plot(x,y)
x <- rnorm(100000)
plot(x)
y <- 10 + 0.5*x + rnorm(sd = 40)
1,
y <- 10 + 0.5*x + rnorm(1, sd = 40)
plot(x,y)
plot(y)
x <- rnorm(10000, sd=30)
y <- 10 + 0.5*x + rnorm(1, sd = 40)
plot(y)
y <- 10 + 50*x + rnorm(1, sd = 40)
plot(y)
y <- 10 + 50*x + rnorm(1, sd = 5)
plot(y)
plot(y)
y <- 10 + 50*x + rnorm(1, sd = 5)
plot(y)
x <- rnorm(10000, sd=5)
y <- 10 + 50*x + rnorm(1, sd = 5)
plot(y)
plot(y, x)
plot(x,y)
y <- 10 + 50*x + rnorm(10000, sd = 5)
plot(x,y)
y <- 10 + 50*x + rnorm(10000, sd = 50)
plot(x,y)
w <- data.frame(x,y)
plot(w)
plot(w)
x <- rnorm(10000)
x <- rnorm(10000)
y <- 10 + 50*x + rnorm(1)
w <- data.frame(x,y)
plot(w)
x <- runif(10000)
y <- 10 + 50*x + rnorm(1)
w <- data.frame(x,y)
plot(w)
plot(x)
plot(y)
x <- read.csv("C:\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv"
x <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv"
)
View(x)
View(x)
x <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv")
View(x)
hist(x$RiskTolerance)
x <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\slq\\WebScrape\\wealthfront_v2\\wealthfront_v2\\result\\wealthfront.csv")
hist(x$RiskTolerance)
plot(x$RiskTolerance)
library(quantmod)
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
View(prices)
prices <- cbind(lapply(assets, getSymbols.google, from = "2016-01-01", auto.assign = FALSE))
View(prices)
View(prices)
prices <- cbind(lapply(assets, function(x){
getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
}))
View(prices)
foo <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- cbind(lapply(assets, foo))
View(prices)
View(prices)
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE))
}
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
View(prices)
rm(princer)
rm(pricer)
rm(prices)
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01",
auto.assign = FALSE)[,4])
}
foo <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- cbind(lapply(assets, foo))
View(prices)
prices <- NULL
for (asset in assets){
prices <- cbind(prices, foo)
}
View(prices)
prices <- NULL
for (asset in assets){
prices <- cbind(prices, foo(assets))
}
View(prices)
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01", auto.assign = FALSE)[,4])
}
prices <- NULL
for (asset in assets){
prices <- cbind(prices, foo(assets))
}
prices <- NULL
prices <- cbind(apply(assets, foo))
prices <- cbind(apply(assets, 1 , foo))
prices <- cbind(apply(assets, 2 , foo))
prices <- cbind(lapply(assets, foo))
prices <- as.data.frame(lapply(assets, foo))
View(prices)
TEST <- getSymbols.google("AXP",from = "2016-01-01", auto.assign = FALSE)
View(TEST)
Sys.time()
a <- Sys.time()
a - Sys.time()
a <- Sys.time()
prices <- NULL
for (asset in assets){
prices <- cbind(prices, getSymbols.google(asset, from = "2016-01-01", auto.assign = FALSE)[,4])
}
a - Sys.time()
a <- Sys.time()
foo <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- as.data.frame(lapply(assets, foo))
a - Sys.time()
rm(foo)
GetValues <- function(x)getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- as.data.frame(lapply(assets, GetValues))
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
GetValues <- function(x) getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- as.data.frame(lapply(assets, GetValues))
library(dplyr)
prices <- prices[apply(prices,1,function(x) all(!is.na(x))),]
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame()
View(prices)
is.na(prices)
which(is.na(prices))
View(prices)
colnames(prices) = assets
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame() %>%
colnames() = assets
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame() %>%
rename(assets)
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame()
View(prices)
prices <- lapply(assets, GetValues) %>%
as.data.frame() %>%
rename(assets)
View(prices)
all()
all(TRUE, TRUE, FALSE)
ROC
na.omit(ROC(prices, type = 'discrete'))
returns_daily <- na.omit(ROC(prices, type = 'discrete'))
returns_annual <- colMeans(returns) * 252
#matriz de covariancia
covMatrix <- cov(returns_daily)
covAnnual <- covMatrix * 252
#Para calcular a fronteira eficiente, precisamos simular combinações
#de portfolios. Neste caso, simularei 30.000 combinações.
#definir o numero de combinações
n_assets <- length(assets)
n_portfolios <- 3000000
#criar vetores/matriz para armazenar retornos, volatilidade e pesos dos portfolios
sim_returns <- rep(0, n_portfolios)
sim_volat <- rep(0, n_portfolios)
sim_SR <- rep(0, n_portfolios)
sim_weights <- matrix(0, n_portfolios, 6)
#loopar para cada combinação de portfolio
for (i in (1:n_portfolios)) {
#Criar um par aleatorio de pesos (vetor que soma 1)
weights <- c(runif(n_assets, 0, 1))
weights <- weights/sum(weights)
#Aplicar pesos para calcular os retornos
weighted_return <- weights %*% returns_annual
#volatilidade = desvpad
volat <- sqrt(t(weights) %*% (covAnnual %*% weights))
#sharpe ratio
sharpe <- weighted_return/volat
#appendar nos vetores/matriz criados
sim_returns[i] <- weighted_return
sim_volat[i] <- volat
sim_SR[i] <- sharpe
sim_weights[i,] <- weights
}
#dataframe para guardar retornos e volatilidades
portfolio <- data.frame('Returns' = sim_returns, 'Volatility' = sim_volat,
'Sharpe Ratio' = sim_SR)
#agregar os pesos no dataframe
i <- 1
for (asset in assets){
portfolio[asset] <- sim_weights[,i]
i = i + 1
}
#Example Plot
colors <- rev(heat.colors(101))
zcolor <- colors[(sim_SR - min(sim_SR))/diff(range(sim_SR))*100 + 1]
plot(x=sim_volat, y=sim_returns, col=zcolor)
#calcular rate of change
returns_daily <- na.omit(ROC(prices, type = 'discrete'))
returns_annual <- colMeans(returns_daily) * 252
#matriz de covariancia
covMatrix <- cov(returns_daily)
covAnnual <- covMatrix * 252
#Para calcular a fronteira eficiente, precisamos simular combinações
#de portfolios. Neste caso, simularei 30.000 combinações.
#definir o numero de combinações
n_assets <- length(assets)
n_portfolios <- 3000000
#criar vetores/matriz para armazenar retornos, volatilidade e pesos dos portfolios
sim_returns <- rep(0, n_portfolios)
sim_volat <- rep(0, n_portfolios)
sim_SR <- rep(0, n_portfolios)
sim_weights <- matrix(0, n_portfolios, 6)
#loopar para cada combinação de portfolio
for (i in (1:n_portfolios)) {
#Criar um par aleatorio de pesos (vetor que soma 1)
weights <- c(runif(n_assets, 0, 1))
weights <- weights/sum(weights)
#Aplicar pesos para calcular os retornos
weighted_return <- weights %*% returns_annual
#volatilidade = desvpad
volat <- sqrt(t(weights) %*% (covAnnual %*% weights))
#sharpe ratio
sharpe <- weighted_return/volat
#appendar nos vetores/matriz criados
sim_returns[i] <- weighted_return
sim_volat[i] <- volat
sim_SR[i] <- sharpe
sim_weights[i,] <- weights
}
#dataframe para guardar retornos e volatilidades
portfolio <- data.frame('Returns' = sim_returns, 'Volatility' = sim_volat,
'Sharpe Ratio' = sim_SR)
#agregar os pesos no dataframe
i <- 1
for (asset in assets){
portfolio[asset] <- sim_weights[,i]
i = i + 1
}
#Example Plot
colors <- rev(heat.colors(101))
zcolor <- colors[(sim_SR - min(sim_SR))/diff(range(sim_SR))*100 + 1]
plot(x=sim_volat, y=sim_returns, col=zcolor)
plot(x=sim_volat, y=sim_returns, col=zcolor)
heat.colors()
library(quantmod)
library(dplyr)
#Selecionar ativos a serem buscados
assets <- c("AXP","C","WFC","AMZN","JNJ","HD")
#Pegar retorno diario
GetValues <- function(x) getSymbols.google(x,from = "2016-01-01", auto.assign = FALSE)[,4]
prices <- lapply(assets, GetValues) %>% as.data.frame()
#deletar datas sem preços
prices <- prices[complete.cases(prices),]
#renomear colunas
colnames(prices) = assets
#calcular rate of change
returns_daily <- na.omit(ROC(prices, type = 'discrete'))
returns_annual <- colMeans(returns_daily) * 252
covMatrix <- cov(returns_daily)
covAnnual <- covMatrix * 252
n_assets <- length(assets)
n_portfolios <- 3000000
sim_returns <- rep(0, n_portfolios)
sim_volat <- rep(0, n_portfolios)
sim_SR <- rep(0, n_portfolios)
sim_weights <- matrix(0, n_portfolios, 6)
for (i in (1:n_portfolios)) {
#Criar um par aleatorio de pesos (vetor que soma 1)
weights <- c(runif(n_assets, 0, 1))
weights <- weights/sum(weights)
#Aplicar pesos para calcular os retornos
weighted_return <- weights %*% returns_annual
#volatilidade = desvpad
volat <- sqrt(t(weights) %*% (covAnnual %*% weights))
#sharpe ratio
sharpe <- weighted_return/volat
#appendar nos vetores/matriz criados
sim_returns[i] <- weighted_return
sim_volat[i] <- volat
sim_SR[i] <- sharpe
sim_weights[i,] <- weights
}
portfolio <- data.frame('Returns' = sim_returns, 'Volatility' = sim_volat,
'Sharpe Ratio' = sim_SR)
i <- 1
for (asset in assets){
portfolio[asset] <- sim_weights[,i]
i = i + 1
}
colors <- rev(heat.colors(101))
zcolor <- colors[(sim_SR - min(sim_SR))/diff(range(sim_SR))*100 + 1]
plot(x=sim_volat, y=sim_returns, col=zcolor)
covMatrix
foo <- read.csv("C:\Users\tadeu\Desktop\FGV\GV DATA\javascript\d3_tutorials\proj001\testdata.csv")
foo <- read.csv("C:\\Users\\tadeu\\Desktop\\FGV\\GV DATA\\javascript\\d3_tutorials\\proj001\\testdata.csv")
View(foo)
View(foo)
foo <- foo[-1,]
View(foo)
write.csv(foo, "C:\\Users\\tadeu\\Desktop\\FGV\\GV DATA\\javascript\\d3_tutorials\\proj001\\testdata.csv")
write.csv(foo, "C:\\Users\\tadeu\\Desktop\\FGV\\GV DATA\\javascript\\d3_tutorials\\proj001\\testdata.csv", row.names = F)
setwd("C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut1")
df <- read.dta13("Problem1.dta")
equations <- list(
eq1 = hrearn ~ union,
eq2 = pension ~ union,
eq3 = insur ~ union,
eq4 = hrbens ~ union
)
summary(systemfit(equations, data = df, method = "OLS"))
library(readstata13)
library(systemfit)
library(dplyr)
library(RFGLS)
setwd("C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut1")
df <- read.dta13("Problem1.dta")
equations <- list(
eq1 = hrearn ~ union,
eq2 = pension ~ union,
eq3 = insur ~ union,
eq4 = hrbens ~ union
)
summary(systemfit(equations, data = df, method = "OLS"))
l <- lapply(equations, lm, data = df) %>% lapply(summary)
lapply(equations, lm, data = df) %>% lapply(summary)
sigma_hat <- lapply(equations, lm, data = df) %>%
lapply(residuals) %>%
as.data.frame() %>%
cov(res)
x <- cbind(df$union, df$union, df$union, df$union)
y <- cbind(df$hrearn, df$pension, df$insur, df$hrbens)
library(stargazer)
library(stargazer)
library(systemfit)
library(readstata13)
library(dplyr)
setwd("C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut2")
df <- read.dta13("Problem2.dta")
df <- df[df$hours != 0,]
eq1 <- hours ~ lwage + educ + age + kidslt6 + kidsge6 + nwifeinc
eq2 <- lwage ~ hours + educ + exper + expersq
instrument1 <- ~ age + kidslt6 + kidsge6 + nwifeinc+ exper + expersq
lm(eq1, df)
stargazer(lm(eq1, df),
lm(eq2, df),type = "text")
stargazer(lm(eq1, df), lm(eq2, df),type = "HTML", out = "TESTE.HTML")
stargazer(lm(eq1, df), lm(eq2, df),type = "HTML", out = "TESTE.html")
stargazer(lm(eq1, df), lm(eq2, df),type = "html", out = "TESTE.html")
stargazer(lm(eq1, df), lm(eq2, df),type = "html", out = "C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut2/TESTE.html")
stargazer(lm(eq1, df), lm(eq2, df),type = "html", out = "C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut2/output1.html")
systemfit(
formula = list(eq1,eq2),
data = df) %>%
summary() %>%
stargazer(type = "html", out = "C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut2/output2.html")
systemfit(
formula = list(eq1,eq2),
data = df) %>%
#summary() %>%
stargazer(type = "html", out = "C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut2/output2.html")
fit_1.1 <- lm(hours ~ age + kidslt6 + kidsge6 + nwifeinc, df) %>% fitted()
fit_2.1 <- lm(lwage ~ exper + expersq, df) %>% fitted()
fit_1.1 <- lm(hours ~ age + kidslt6 + kidsge6 + nwifeinc, df) %>% fitted()
fit_2.1 <- lm(lwage ~ exper + expersq, df) %>% fitted()
fit_1.2 <- lm(fit_1.1 ~ lwage + educ, df)
fit_2.2 <- lm(fit_2.1 ~ hours + educ, df)
hours_redu <- lm(hours ~ age + kidslt6 + kidsge6 + nwifeinc+ exper + expersq, df) %>% fitted()
lwage_redu <- lm(lwage ~ age + kidslt6 + kidsge6 + nwifeinc+ exper + expersq, df) %>% fitted()
fit_1.2 <- lm(hours ~ lwage_redu + educ + age + kidslt6 + kidsge6 + nwifeinc, df)
fit_2.2 <- lm(lwage ~ hours_redu + educ + exper + expersq, df)
stargazer(fit_1.2,fit_2.2, type = "html", out = "C:\\Users\\tadeu\\Desktop\\FGV\\semestre 7\\econometria 3\\tutoriais\\tut2/output2.html")
